I 8051

1. 8051 Assembly Language program

ORG 0000H
CLR C
MOV A, #20H
ADD A, #21H
MOV R0, A
END


2. Test data transfer between registers and memory
a
ORG 0000H
CLR C
MOV R0, #55H
MOV R1, #6FH
MOV A, R0
MOV 30H, A
MOV A, R1
MOV 31H, A
END

b
ORG 0000H
CLR C
MOV R0, #30H
MOV R1, #40H
MOV R7, #06H
BACK: MOV A, @R0
MOV @R1, A
INC R0
INC R1
DJNZ R7, BACK
END

3. ALU operations

ORG 0000H
CLR C
//ADDITION
MOV A, #20H
ADD A, #21H
MOV 41H, A
//SUBTRACTION
MOV A, #20H
SUBB A, #18H
MOV 42H, A
//MULTIPLICATION
MOV A, #03H
MOV B, #04H
MUL AB
MOV 43H, A
//DIVISION
MOV A, #95H
MOV B, #10H
DIV AB
MOV 44H, A
MOV 45H, B
//AND
MOV A, #25H
MOV B, #12H
ANL A, B
MOV 46H, A
//OR
MOV A, #25H
MOV B, #15H
ORL A, B
MOV 47H, A
//XOR
MOV A, #45H
MOV B, #67H
XRL A, B
MOV 48H, A
//NOT
MOV A, #45H
CPL A
MOV 49H, A
END


4.WRITE BASIC PROGRAMS USING EMBEDDED C


ORG 0x0000 ; Start address
main:
MOV P1, #0xFF ; Enable all pins of Port 1
ACALL DELAY
 ; Delay for demonstration purposes
MOV P1, #0x00 ; Disable all pins of Port 1
ACALL DELAY
 ; Delay for demonstration purposes
SJMP main
 ; Infinite loop
DELAY:
; Insert your delay subroutine here
; For example, a simple delay loop
MOV R2, #0xFF ; Initialize delay counter
delay_loop:
DJNZ R2, delay_loop ; Decrement counter and loop until
zero
RET
 ; Return from delay subroutine
END
 ; End of program




5. INTRODUCTION TO ARDUINO PROGRAMMING

a. DIGITAL WRITE:

void setup() {
pinMode(2, OUTPUT);
}
void loop() {
digitalWrite(2, HIGH);
delay(1000);
digitalWrite(2, LOW);
delay(1000);
}

b. DIGITAL READ:
void setup() {
pinMode(2, OUTPUT);
pinMode(5, INPUT_PULLUP);
}
void loop() {
int sw=digitalRead(5);
if(sw==1)
{
for(int i=0; i<5; i++)
{
digitalWrite(2, HIGH);
delay(1000);
digitalWrite(2, LOW);
delay(1000);
}
}
else
{
digitalWrite(2, LOW);
}
}


c. ANALOG READ:
void setup() {
pinMode(2, OUTPUT);
Serial.begin(9600);
}
void loop() {
int joystick=analogRead(A0);
Serial.println(joystick);
if(joystick>800)
digitalWrite(2, HIGH);
else
digitalWrite(2, LOW);
delay(500);
}

d. ANALOG WRITE:
void setup() {
pinMode(3, OUTPUT);
}
void loop() {
for(int i=0; i<256;i++) {
analogWrite(3,i);
delay(20);
}
for(int i=255; i>=0;i--) {
analogWrite(3,i);
delay(20);
}
}


e. SERIAL COMMUNICATION:
void setup() {
Serial.begin(9600);
pinMode(4, OUTPUT);
}
void loop() {
if(Serial.available()>0)
{
char data=Serial.read();
Serial.println(data);
if(data=='1'){
digitalWrite(4,HIGH);
}
else if(data=='2'){
digitalWrite(4,LOW);
}
}
}




6. bluetooth

a.

#include<SoftwareSerial.h>
SoftwareSerial mySerial(2,3); //rx,tx
void setup() {
mySerial.begin(9600);
Serial.begin(9600);
pinMode(4, OUTPUT);
}
void loop() {
if(mySerial.available()>0)
{
char data=mySerial.read();
Serial.println(data);
if(data=='1'){
digitalWrite(4,HIGH);
Serial.println("LED ON");
}
else if(data=='2'){
digitalWrite(4,LOW);
Serial.println("LED OFF");
}
}
}


b.

#include<SoftwareSerial.h>
SoftwareSerial mySerial(2,3); //rx,tx
void setup() {
mySerial.begin(9600);
Serial.begin(9600);
pinMode(4, OUTPUT);
}
void loop() {
if(mySerial.available()>0)
{
char data=mySerial.read();
Serial.println(data);
if(data=='1'){
digitalWrite(4,HIGH);
Serial.println("LED ON");
}
else if(data=='2'){
digitalWrite(4,LOW);
Serial.println("LED OFF");
}
}
}


7. micropython

a LED:
from machine import Pin
import time
LED = Pin(16, Pin.OUT)
while True:
    LED.value(1)
    time.sleep(1)
    LED.value(0)
    time.sleep(1)


b RGB:
from machine import Pin
from time import sleep_ms,sleep
r=Pin(16,Pin.OUT)
y=Pin(17,Pin.OUT)
g=Pin(18,Pin.OUT)
while True:
    r.value(1)
    sleep_ms(1000)
    r.value(0)
    sleep_ms(1000)
    y.value(1)
    sleep(1)
    y.value(0)
    sleep(1)
    g.value(1)
    sleep(1)
    g.value(0)
    sleep(1)


c SWITCH CONTROLLED LED:
from machine import Pin
from time import sleep
led=Pin(16,Pin.OUT)
sw=Pin(15,Pin.IN)
while True:
    bt=sw.value()
    if bt== True:
        print("LED ON")
        led.value(1)
        sleep(2)
        led.value (0)
        sleep(2)
        led.value (1)
        sleep(2)
        led.value(0)
        sleep(2)
    else:
        print("LED OFF")
    sleep(0.5)


8 interface between

a IR Sensor:
from machine import Pin
from time import sleep
buzzer=Pin(16,Pin.OUT)
ir=Pin(15,Pin.IN)
while True:
    ir_value=ir.value()
    if ir_value== True:
        print("Buzzer OFF")
        buzzer.value(0)
    else:
        print("Buzzer ON")
        buzzer.value (1)
    sleep(0.5)


b ULTRASONIC SENSOR:
from machine import Pin, PWM
import utime
trigger = Pin(14, Pin.OUT)
echo = Pin(15, Pin.IN)
buzzer = Pin(16, Pin.OUT)
def measure_distance():
    trigger.low()
    utime.sleep_us(2)
    trigger.high()
    utime.sleep_us(5)
    trigger.low()
    while echo.value() == 0:
        signaloff = utime.ticks_us()
    while echo.value() == 1:
        signalon = utime.ticks_us()
    timepassed = signalon - signaloff
    distance = (timepassed * 0.0343) / 2
    return distance

while True:
    dist = measure_distance()
    print(f"Distance : {dist} cm")
    if dist <= 10:
        buzzer.value(1)
        utime.sleep(0.01)
    else:
        buzzer.value(0)
        utime.sleep(0.01)
    utime.sleep(0.5)


9 COMMUNICATE BETWEEN ARDUINO AND RASPBERRY PI

MASTER
ARDUINO:
#include<SoftwareSerial.h>
SoftwareSerial mySerial(2,3); //rx,tx
void setup() {
mySerial.begin(9600);
}
void loop() {
mySerial.write('A');
delay(1000);
mySerial.write('B');
delay(1000);
}


SLAVE
RASPBERRY PI PICO
from machine import Pin, UART
uart = UART(0, 9600)
led = Pin(16, Pin.OUT)
while True:
if uart.any() > 0:
data = uart.read()
print(data)
if "A" in data:
led.value(1)
print('LED on \n')
uart.write('LED on \n')
elif "B" in data:
led.value(0)
print('LED off \n')
uart.write('LED off \n')


10. iot based blynk system

#define BLYNK_TEMPLATE_ID
"***********"#define BLYNK_DEVICE_NAME
"Home Automation"#define
BLYNK_AUTH_TOKEN
"********************"// Comment this out to
disable prints and save space#define
BLYNK_PRINT Serial#include <WiFi.h>#include
<WiFiClient.h>#include
<BlynkSimpleEsp32.h>char auth[] =
BLYNK_AUTH_TOKEN;// Your WiFi
credentials.// Set password to "" for open
networks.char ssid[] = "Wokwi-GUEST";char
pass[] = "";BlynkTimer timer;#define button1_pin
26#define button2_pin 25#define button3_pin
33#define button4_pin 32#define relay1_pin
13#define relay2_pin 12#define relay3_pin
14#define relay4_pin 27int relay1_state = 0;int
relay2_state = 0;int relay3_state = 0;int relay4_state
= 0;//Change the virtual pins according the
rooms#define button1_vpin V1#define
button2_vpin V2#define button3_vpin V3
#define button4_vpin
V4//---------------------------------------------------------
---------------------// This function is called every
time the device is connected to the Blynk.Cloud//
Request the latest state from the
serverBLYNK_CONNECTED() {
Blynk.syncVirtual(button1_vpin);
Blynk.syncVirtual(button2_vpin);
Blynk.syncVirtual(button3_vpin);
Blynk.syncVirtual(button4_vpin);}//------------------
--------------------------------------------------------//
This function is called every time the Virtual Pin
state change//i.e when web push switch from Blynk
App or Web
DashboardBLYNK_WRITE(button1_vpin) {
relay1_state = param.asInt();
digitalWrite(relay1_pin,
relay1_state);}//-------------------------------------------
-------------------------------BLYNK_WRITE(button2
_vpin) { relay2_state = param.asInt();
digitalWrite(relay2_pin, relay2_state);}
BLYNK_WRITE(button3_vpin) { relay3_state =
param.asInt(); digitalWrite(relay3_pin,
relay3_state);}//-----------------------
--------BLYNK_WRITE(button4_vpin) {
relay4_state = param.asInt();
digitalWrite(relay4_pin,
relay4_state);}//-----------------------
void
setup(){ // Debug console Serial.begin(115200);
//-----------------------------------------
--------------------------- pinMode(button1_pin,
INPUT_PULLUP); pinMode(button2_pin,
INPUT_PULLUP); pinMode(button3_pin,
INPUT_PULLUP); pinMode(button4_pin,
INPUT_PULLUP);
//-----------------------------------------
--------------------------- pinMode(relay1_pin,
OUTPUT); pinMode(relay2_pin, OUTPUT);
pinMode(relay3_pin, OUTPUT);
pinMode(relay4_pin, OUTPUT);
//-----------------------------------------
--------------------------- //During Starting all Relays
should TURN OFF digitalWrite(relay1_pin, HIGH);
digitalWrite(relay2_pin, HIGH);
digitalWrite(relay3_pin, HIGH);
digitalWrite(relay4_pin, HIGH);
//-----------------------------------------
--------------------------- Blynk.begin(auth, ssid,
pass); // You can also specify server:
//Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
//Blynk.begin(auth, ssid, pass,
IPAddress(192,168,1,100), 8080);
//-----------------------------------------
//Blynk.virtualWrite(button1_vpin, relay1_state);
//Blynk.virtualWrite(button2_vpin, relay2_state);
//Blynk.virtualWrite(button3_vpin, relay3_state);
//Blynk.virtualWrite(button4_vpin, relay4_state);
//-----------------------------------------
---------------------------}void loop(){ Blynk.run();
timer.run(); // You can inject your own code or
combine it with other sketches. // Check other
examples on how to communicate with Blynk.
Remember // to avoid delay() function!
listen_push_buttons();}
if(digitalRead(button1_pin) == LOW){
delay(200);
 control_relay(1);
Blynk.virtualWrite(button1_vpin, relay1_state);


b servo motor

SERVO MOTOR:
from time import sleep
from machine import Pin, PWM
pwm = PWM(Pin(1))
pwm.freq(50)
while True:
    for position in range(1000,9000,50):
        pwm.duty_u16(position)
        sleep(0.01)
for position in range(9000,1000,-50):
    pwm.duty_u16(position)
    sleep(0.01)


https://wokwi.com/projects/394124032950921217 - blynk

https://wokwi.com/projects/393490643762695169 - servo

https://wokwi.com/projects/395752085205705729 - led switch
